#include <stdio.h>
#include<string.h>

//calculate power
float power(float x, int y)
{
    float temp;
    if( y == 0)
       return 1;
    temp = power(x, y/2);      
    if (y%2 == 0)
        return temp*temp;
    else
    {
        if(y > 0)
            return x*temp*temp;
        else
            return (temp*temp)/x;
    }
}

int main(void) {
	// your code goes here
	char str[50];
	int *array_index;
	fgets(str, 50, stdin);
	int len = strlen(str);
	
	array_index = (int*)malloc(sizeof(int)*len);
	int i = 0;
	//if(array_index != NULL)
		array_index[0] = 0;
	int j = 0;
	for(i=1;i<=len;i++) 
	{
		if(str[j] == 'l')
			array_index[i] = 2*array_index[i-1]+1;
		else
			array_index[i] = 2*array_index[i-1]+2;
	}
	
	int val = array_index[len];
	//printf("val %d \n",val);
	//find n such that 1+2^1 + 2^2....+2^n > val
	int sum=0;
	j = 0;
	while(sum < val)
	{
		sum +=  power(2.0,j);
		j++;
	}
	
	int N = j-1;
	printf("N %d %d\n",N,sum);
	int offset = val - (sum-power(2.0,j-1))+1;
	int a;
	int num_element=0;
	
	int final_label = 0;
//if length is even than we consider final label lies in odd level.
	if(len%2 == 0) 
	{
		//iseven = 0;
		//so index of element lies in odd row
		a = 1;
		for(i=0;i<len;i=i+2)
		{
			num_element += power(2,i);
		}
		num_element += offset;
		final_label = a+(num_element-1)*2;
	}
	else
	{
		a = 2;
		for(i=1;i<len;i=i+2)
		{
			num_element += power(2,i);
		}
		num_element += offset;
		final_label = a+(num_element-1)*2;
	}
	
	printf("final  Label %d",final_label);	
	//printf("%s %d",str,strlen(str));
	
	//array index of string.
	
	return 0;
}

